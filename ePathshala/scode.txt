====================================================================================================
HOSPITAL MANAGEMENT SYSTEM - SPRING BOOT, REACT, MYSQL CODE
Project Path: C:\Users\saket\OneDrive\Desktop\ePathshala\Backend_SpringBoot\ePathshala
Generated on: 2025-07-25 15:56:23
====================================================================================================



====================================================================================================
// File: src\main\java\com\ePathshala\EPathshalaApplication.java
====================================================================================================

package com.ePathshala;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class EPathshalaApplication {

	public static void main(String[] args) {
		SpringApplication.run(EPathshalaApplication.class, args);
	}

}


====================================================================================================
// File: src\main\java\com\ePathshala\config\SecurityConfig.java
====================================================================================================

package com.ePathshala.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import com.ePathshala.security.JwtAuthenticationFilter;
import com.ePathshala.security.UserDetailsServiceImpl;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

	@Autowired
	private JwtAuthenticationFilter jwtAuthenticationFilter;

	@Autowired
	private UserDetailsServiceImpl userDetailsService;

	@Bean
	public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
		return http.csrf(AbstractHttpConfigurer::disable)
				.sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
				.authorizeHttpRequests(auth -> auth.requestMatchers("/api/auth/**").permitAll()
						.requestMatchers("/v3/api-docs/**", "/swagger-ui/**", "/swagger-ui.html", "/swagger")
						.permitAll()

						.requestMatchers("/api/admin/**").hasRole("ADMIN").requestMatchers("/api/student/**")
						.hasRole("STUDENT").requestMatchers("/api/teacher/**").hasRole("TEACHER")
						.requestMatchers("/api/parent/**").hasRole("PARENT").anyRequest().authenticated())

				.userDetailsService(userDetailsService)
				.addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class).build();
	}

	@Bean
	public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {
		return config.getAuthenticationManager();
	}

	@Bean
	public PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}
}

====================================================================================================
// File: src\main\java\com\ePathshala\config\SwaggerConfig.java
====================================================================================================

package com.ePathshala.config;

import org.springdoc.core.customizers.OpenApiCustomizer;
import org.springdoc.core.models.GroupedOpenApi;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import io.swagger.v3.oas.models.Components;
import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.security.SecurityRequirement;
import io.swagger.v3.oas.models.security.SecurityScheme;

@Configuration
public class SwaggerConfig {

	@Bean
	public OpenAPI openAPI() {
		return new OpenAPI()
				.info(new Info().title("ePathshala API").version("1.0.0")
						.description("API documentation for ePathshala"))
				.components(new Components().addSecuritySchemes("bearerAuth",
						new SecurityScheme().type(SecurityScheme.Type.HTTP).scheme("bearer").bearerFormat("JWT")
								.in(SecurityScheme.In.HEADER).name("Authorization")))
				.addSecurityItem(new SecurityRequirement().addList("bearerAuth"));
	}

	@Bean
	public GroupedOpenApi groupedOpenApi(OpenApiCustomizer customizer) {
		return GroupedOpenApi.builder().group("ePathshala").addOpenApiCustomizer(customizer).pathsToMatch("/**")
				.build();
	}

	@Bean
	public OpenApiCustomizer customizer() {
		return openApi -> {
			// Additional customization logic if needed
		};
	}
}

====================================================================================================
// File: src\main\java\com\ePathshala\controller\AdminController.java
====================================================================================================

package com.ePathshala.controller;


====================================================================================================
// File: src\main\java\com\ePathshala\controller\AuthController.java
====================================================================================================

package com.ePathshala.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ePathshala.dto.LoginRequest;
import com.ePathshala.dto.LoginResponse;
import com.ePathshala.dto.RegisterUserRequest;
import com.ePathshala.dto.UserDTO;
import com.ePathshala.service.AuthService;

@RestController
@RequestMapping("/api/auth")
public class AuthController {

	@Autowired
	private AuthService authService;

	@PostMapping("/login")
	public ResponseEntity<LoginResponse> login(@RequestBody LoginRequest request) {
		LoginResponse response = authService.login(request);
		return ResponseEntity.ok(response);
	}

	@PostMapping("/register")
	public ResponseEntity<UserDTO> register(@RequestBody RegisterUserRequest request) {
		UserDTO createdUser = authService.register(request);
		return ResponseEntity.ok(createdUser);
	}
}

====================================================================================================
// File: src\main\java\com\ePathshala\controller\GradeController.java
====================================================================================================

package com.ePathshala.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ePathshala.dto.GradeDTO;
import com.ePathshala.service.GradeService;

@RestController
@RequestMapping("/grades")
public class GradeController {

	@Autowired
	private GradeService gradeService;

	@GetMapping
	public List<GradeDTO> getAllGrades() {
		return gradeService.getAllGrades();
	}

	@PostMapping
	public GradeDTO createGrade(@RequestBody GradeDTO dto) {
		return gradeService.createGrade(dto);
	}

	@PutMapping("/{id}")
	public GradeDTO updateGrade(@PathVariable Long id, @RequestBody GradeDTO dto) {
		return gradeService.updateGrade(id, dto);
	}

	@DeleteMapping("/{id}")
	public void deleteGrade(@PathVariable Long id) {
		gradeService.deleteGrade(id);
	}
}

====================================================================================================
// File: src\main\java\com\ePathshala\controller\LeaveRequestController.java
====================================================================================================

package com.ePathshala.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ePathshala.dto.LeaveRequestDTO;
import com.ePathshala.service.LeaveRequestService;

@RestController
@RequestMapping("/leave-requests")
public class LeaveRequestController {

	@Autowired
	private LeaveRequestService leaveRequestService;

	@GetMapping
	public List<LeaveRequestDTO> getAllLeaveRequests() {
		return leaveRequestService.getAllLeaveRequests();
	}

	@PostMapping
	public LeaveRequestDTO createLeaveRequest(@RequestBody LeaveRequestDTO dto) {
		return leaveRequestService.createLeaveRequest(dto);
	}

	@PutMapping("/{id}")
	public LeaveRequestDTO updateLeaveRequest(@PathVariable Long id, @RequestBody LeaveRequestDTO dto) {
		return leaveRequestService.updateLeaveRequest(id, dto);
	}

	@DeleteMapping("/{id}")
	public void deleteLeaveRequest(@PathVariable Long id) {
		leaveRequestService.deleteLeaveRequest(id);
	}
}

====================================================================================================
// File: src\main\java\com\ePathshala\controller\StudentController.java
====================================================================================================

package com.ePathshala.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ePathshala.dto.StudentDTO;
import com.ePathshala.service.StudentService;

@RestController
@RequestMapping("/students")
public class StudentController {

	@Autowired
	private StudentService studentService;

	@GetMapping
	public List<StudentDTO> getAllStudents() {
		return studentService.getAllStudents();
	}

	@GetMapping("/{id}")
	public StudentDTO getStudent(@PathVariable Long id) {
		return studentService.getStudentById(id);
	}

	@PostMapping
	public StudentDTO createStudent(@RequestBody StudentDTO dto) {
		return studentService.createStudent(dto);
	}

	@PutMapping("/{id}")
	public StudentDTO updateStudent(@PathVariable Long id, @RequestBody StudentDTO dto) {
		return studentService.updateStudent(id, dto);
	}

	@DeleteMapping("/{id}")
	public void deleteStudent(@PathVariable Long id) {
		studentService.deleteStudent(id);
	}
}

====================================================================================================
// File: src\main\java\com\ePathshala\controller\TimetableController.java
====================================================================================================

package com.ePathshala.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ePathshala.dto.TimetableDTO;
import com.ePathshala.service.TimetableService;

@RestController
@RequestMapping("/timetable")
public class TimetableController {

	@Autowired
	private TimetableService timetableService;

	@GetMapping
	public List<TimetableDTO> getAllTimetables() {
		return timetableService.getAllTimetables();
	}

	@PostMapping
	public TimetableDTO createTimetable(@RequestBody TimetableDTO dto) {
		return timetableService.createTimetable(dto);
	}

	@PutMapping("/{id}")
	public TimetableDTO updateTimetable(@PathVariable Long id, @RequestBody TimetableDTO dto) {
		return timetableService.updateTimetable(id, dto);
	}

	@DeleteMapping("/{id}")
	public void deleteTimetable(@PathVariable Long id) {
		timetableService.deleteTimetable(id);
	}
}

====================================================================================================
// File: src\main\java\com\ePathshala\controller\UserController.java
====================================================================================================

package com.ePathshala.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ePathshala.dto.UserDTO;
import com.ePathshala.service.UserService;

@RestController
@RequestMapping("/users")
public class UserController {

	@Autowired
	private UserService userService;

	@GetMapping("/{id}")
	public UserDTO getUser(@PathVariable Long id) {
		return userService.getUserById(id);
	}

	@PostMapping
	public UserDTO createUser(@RequestBody UserDTO dto) {
		return userService.createUser(dto);
	}

	@PutMapping("/{id}")
	public UserDTO updateUser(@PathVariable Long id, @RequestBody UserDTO dto) {
		return userService.updateUser(id, dto);
	}

	@DeleteMapping("/{id}")
	public void deleteUser(@PathVariable Long id) {
		userService.deleteUser(id);
	}
}

====================================================================================================
// File: src\main\java\com\ePathshala\dto\AcademicEventDTO.java
====================================================================================================

package com.ePathshala.dto;

import java.time.LocalDate;

import lombok.Data;

@Data
public class AcademicEventDTO {
	private Integer eventId;
	private String title;
	private String description;
	private LocalDate eventDate;
}

====================================================================================================
// File: src\main\java\com\ePathshala\dto\AssignmentDTO.java
====================================================================================================

package com.ePathshala.dto;

import java.time.LocalDate;

import lombok.Data;

@Data
public class AssignmentDTO {
	private Integer assignmentId;
	private String title;
	private String description;
	private String filePath;
	private LocalDate dueDate;
	private Integer teacherId;
	private Integer classId;
	private Integer subjectId;
}

====================================================================================================
// File: src\main\java\com\ePathshala\dto\AttendanceDTO.java
====================================================================================================

package com.ePathshala.dto;

import java.time.LocalDate;

import com.ePathshala.enums.AttendanceStatus;

import lombok.Data;

@Data
public class AttendanceDTO {
	private Integer attendanceId;
	private Integer studentId;
	private Integer subjectId;
	private LocalDate date;
	private AttendanceStatus status;
	private Integer markedByTeacherId;
}

====================================================================================================
// File: src\main\java\com\ePathshala\dto\ClassDTO.java
====================================================================================================

package com.ePathshala.dto;

import lombok.Data;

@Data
public class ClassDTO {
	private Integer classId;
	private String className;
}

====================================================================================================
// File: src\main\java\com\ePathshala\dto\FeeDTO.java
====================================================================================================

package com.ePathshala.dto;

import java.math.BigDecimal;
import java.time.LocalDate;

import lombok.Data;

@Data
public class FeeDTO {
	private Integer feeId;
	private Integer classId;
	private BigDecimal amount;
	private LocalDate dueDate;
}

====================================================================================================
// File: src\main\java\com\ePathshala\dto\FeedbackDTO.java
====================================================================================================

package com.ePathshala.dto;

import java.time.LocalDateTime;

import lombok.Data;

@Data
public class FeedbackDTO {
	private Integer feedbackId;
	private String name;
	private String email;
	private String message;
	private LocalDateTime submittedAt;
}

====================================================================================================
// File: src\main\java\com\ePathshala\dto\GradeDTO.java
====================================================================================================

package com.ePathshala.dto;

import java.math.BigDecimal;

import lombok.Data;

@Data
public class GradeDTO {
	private Integer gradeId;
	private Integer studentId;
	private Integer subjectId;
	private BigDecimal marks;
	private Integer teacherId;
}

====================================================================================================
// File: src\main\java\com\ePathshala\dto\LeaveRequestDTO.java
====================================================================================================

package com.ePathshala.dto;

import java.time.LocalDate;
import java.time.LocalDateTime;

import com.ePathshala.enums.ApprovalStatus;
import com.ePathshala.enums.LeaveRequester;

import lombok.Data;

@Data
public class LeaveRequestDTO {
	private Integer leaveId;
	private Integer studentId;
	private String reason;
	private LocalDate fromDate;
	private LocalDate toDate;
	private LeaveRequester requestedBy;
	private ApprovalStatus teacherApproval;
	private ApprovalStatus parentApproval;
	private String finalStatus;
	private LocalDateTime createdAt;
}

====================================================================================================
// File: src\main\java\com\ePathshala\dto\LoginRequest.java
====================================================================================================

package com.ePathshala.dto;

import com.ePathshala.enums.Role;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import lombok.Data;

@Data
public class LoginRequest {
	@Email
	private String email;

	@NotBlank
	private String password;

	@NotNull
	private Role role;
}

====================================================================================================
// File: src\main\java\com\ePathshala\dto\LoginResponse.java
====================================================================================================

package com.ePathshala.dto;

import com.ePathshala.enums.Role;

import lombok.Data;

@Data
public class LoginResponse {
	private String jwtToken;
	private Role role;
	private String name;
}

====================================================================================================
// File: src\main\java\com\ePathshala\dto\ParentDTO.java
====================================================================================================

package com.ePathshala.dto;

import lombok.Data;

@Data
public class ParentDTO {
	private Integer parentId;
	private UserDTO user;
}

====================================================================================================
// File: src\main\java\com\ePathshala\dto\PaymentDTO.java
====================================================================================================

package com.ePathshala.dto;

import java.math.BigDecimal;
import java.time.LocalDateTime;

import lombok.Data;

@Data
public class PaymentDTO {
	private Integer paymentId;
	private Integer studentId;
	private Integer feeId;
	private BigDecimal amountPaid;
	private LocalDateTime paymentDate;
}

====================================================================================================
// File: src\main\java\com\ePathshala\dto\RegisterUserRequest.java
====================================================================================================

package com.ePathshala.dto;

import com.ePathshala.enums.Role;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import lombok.Data;

@Data
public class RegisterUserRequest {
    @NotBlank
    private String name;

    @Email
    private String email;

    @NotBlank
    private String password;

    @NotNull
    private Role role;
}

====================================================================================================
// File: src\main\java\com\ePathshala\dto\StudentDTO.java
====================================================================================================

package com.ePathshala.dto;

import lombok.Data;

@Data
public class StudentDTO {
	private Integer studentId;
	private UserDTO user;
	private Integer classId;
	private Integer parentId;
}

====================================================================================================
// File: src\main\java\com\ePathshala\dto\SubjectDTO.java
====================================================================================================

package com.ePathshala.dto;

import lombok.Data;

@Data
public class SubjectDTO {
	private Integer subjectId;
	private String subjectName;
	private Integer classId;
}

====================================================================================================
// File: src\main\java\com\ePathshala\dto\TeacherAssignmentDTO.java
====================================================================================================

package com.ePathshala.dto;

import lombok.Data;

@Data
public class TeacherAssignmentDTO {
	private Integer assignmentId;
	private Integer teacherId;
	private Integer classId;
	private Integer subjectId;
}

====================================================================================================
// File: src\main\java\com\ePathshala\dto\TeacherDTO.java
====================================================================================================

package com.ePathshala.dto;

import lombok.Data;

@Data
public class TeacherDTO {
	private Integer teacherId;
	private UserDTO user;
}

====================================================================================================
// File: src\main\java\com\ePathshala\dto\TimetableDTO.java
====================================================================================================

package com.ePathshala.dto;

import java.time.DayOfWeek;
import java.time.LocalTime;

import lombok.Data;

@Data
public class TimetableDTO {
	private Integer timetableId;
	private Integer classId;
	private DayOfWeek dayOfWeek;
	private LocalTime startTime;
	private LocalTime endTime;
	private Integer subjectId;
	private Integer teacherId;
}

====================================================================================================
// File: src\main\java\com\ePathshala\dto\UserDTO.java
====================================================================================================

package com.ePathshala.dto;

import com.ePathshala.enums.Role;

import lombok.Data;

@Data
public class UserDTO {
    private Integer userId;
    private String name;
    private String email;
    private String accountNumber;
    private Role role;
}

====================================================================================================
// File: src\main\java\com\ePathshala\entity\AcademicEvent.java
====================================================================================================

package com.ePathshala.entity;

import java.time.LocalDate;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Builder
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "AcademicCalendar")
@Data
public class AcademicEvent {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Integer eventId;

	private String title;
	private String description;
	private LocalDate eventDate;
}

====================================================================================================
// File: src\main\java\com\ePathshala\entity\Assignment.java
====================================================================================================

package com.ePathshala.entity;

import java.time.LocalDate;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import lombok.Data;
@Entity
@Table(name = "Assignments")
@Data
public class Assignment {
    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer assignmentId;

    private String title;
    private String description;
    private String filePath;
    private LocalDate dueDate;

    @ManyToOne @JoinColumn(name = "teacherId")
    private Teacher teacher;

    @ManyToOne @JoinColumn(name = "classId")
    private ClassEntity classEntity;

    @ManyToOne @JoinColumn(name = "subjectId")
    private Subject subject;
}

====================================================================================================
// File: src\main\java\com\ePathshala\entity\Attendance.java
====================================================================================================

package com.ePathshala.entity;

import java.time.LocalDate;

import com.ePathshala.enums.AttendanceStatus;

import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Builder
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "Attendance")
@Data
public class Attendance {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Integer attendanceId;

	@ManyToOne
	@JoinColumn(name = "studentId")
	private Student student;

	@ManyToOne
	@JoinColumn(name = "subjectId")
	private Subject subject;

	private LocalDate date;

	@Enumerated(EnumType.STRING)
	private AttendanceStatus status;

	@ManyToOne
	@JoinColumn(name = "markedByTeacherId")
	private Teacher markedByTeacher;
}

====================================================================================================
// File: src\main\java\com\ePathshala\entity\ClassEntity.java
====================================================================================================

package com.ePathshala.entity;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "Classes")
@Data
public class ClassEntity {
    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer classId;

    private String className;
}

====================================================================================================
// File: src\main\java\com\ePathshala\entity\Fee.java
====================================================================================================

package com.ePathshala.entity;

import java.math.BigDecimal;
import java.time.LocalDate;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Builder
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "Fees")
@Data
public class Fee {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Integer feeId;

	@ManyToOne
	@JoinColumn(name = "classId")
	private ClassEntity classEntity;

	private BigDecimal amount;
	private LocalDate dueDate;
}

====================================================================================================
// File: src\main\java\com\ePathshala\entity\Feedback.java
====================================================================================================

package com.ePathshala.entity;

import java.time.LocalDateTime;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Builder
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "Feedbacks")
@Data
public class Feedback {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Integer feedbackId;

	private String name;
	private String email;
	private String message;
	private LocalDateTime submittedAt;
}

====================================================================================================
// File: src\main\java\com\ePathshala\entity\Grade.java
====================================================================================================

package com.ePathshala.entity;

import java.math.BigDecimal;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Builder
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "Grades")
@Data
public class Grade {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Integer gradeId;

	@ManyToOne
	@JoinColumn(name = "studentId")
	private Student student;

	@ManyToOne
	@JoinColumn(name = "subjectId")
	private Subject subject;

	private BigDecimal marks;

	@ManyToOne
	@JoinColumn(name = "teacherId")
	private Teacher teacher;
}


====================================================================================================
// File: src\main\java\com\ePathshala\entity\LeaveRequest.java
====================================================================================================

package com.ePathshala.entity;

import java.time.LocalDate;
import java.time.LocalDateTime;

import com.ePathshala.enums.ApprovalStatus;
import com.ePathshala.enums.LeaveRequester;

import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import jakarta.persistence.Transient;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Builder
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "LeaveRequests")
@Data
public class LeaveRequest {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Integer leaveId;

	@ManyToOne
	@JoinColumn(name = "studentId")
	private Student student;

	@Enumerated(EnumType.STRING)
	private LeaveRequester requestedBy;

	@Enumerated(EnumType.STRING)
	private ApprovalStatus teacherApproval;

	@Enumerated(EnumType.STRING)
	private ApprovalStatus parentApproval;

	private String reason;
	private LocalDate fromDate;
	private LocalDate toDate;

	private LocalDateTime createdAt;

	@Transient
	public String getFinalStatus() {
		if (teacherApproval == ApprovalStatus.Approved && parentApproval == ApprovalStatus.Approved)
			return "Approved";
		else if (teacherApproval == ApprovalStatus.Rejected || parentApproval == ApprovalStatus.Rejected)
			return "Rejected";
		else
			return "Pending";
	}
}

====================================================================================================
// File: src\main\java\com\ePathshala\entity\Parent.java
====================================================================================================

package com.ePathshala.entity;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.OneToOne;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Builder
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "Parents")
@Data
public class Parent {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Integer parentId;

	@OneToOne
	@JoinColumn(name = "userId")
	private User user;
}

====================================================================================================
// File: src\main\java\com\ePathshala\entity\Payment.java
====================================================================================================

package com.ePathshala.entity;

import java.math.BigDecimal;
import java.time.LocalDateTime;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Builder
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "Payments")
@Data
public class Payment {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Integer paymentId;

	@ManyToOne
	@JoinColumn(name = "studentId")
	private Student student;

	@ManyToOne
	@JoinColumn(name = "feeId")
	private Fee fee;

	private BigDecimal amountPaid;
	private LocalDateTime paymentDate;
}


====================================================================================================
// File: src\main\java\com\ePathshala\entity\Student.java
====================================================================================================

package com.ePathshala.entity;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToOne;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Builder
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "Students")
@Data
public class Student {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Integer studentId;

	@OneToOne
	@JoinColumn(name = "userId")
	private User user;

	@ManyToOne
	@JoinColumn(name = "classId")
	private ClassEntity classEntity;

	@ManyToOne
	@JoinColumn(name = "parentId")
	private Parent parent;
}

====================================================================================================
// File: src\main\java\com\ePathshala\entity\Subject.java
====================================================================================================

package com.ePathshala.entity;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Builder
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "Subjects")
@Data
public class Subject {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Integer subjectId;

	private String subjectName;

	@ManyToOne
	@JoinColumn(name = "classId")
	private ClassEntity classEntity;
}

====================================================================================================
// File: src\main\java\com\ePathshala\entity\Teacher.java
====================================================================================================

package com.ePathshala.entity;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.OneToOne;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Builder
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "Teachers")
@Data
public class Teacher {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Integer teacherId;

	@OneToOne
	@JoinColumn(name = "userId")
	private User user;
}

====================================================================================================
// File: src\main\java\com\ePathshala\entity\TeacherAssignment.java
====================================================================================================

package com.ePathshala.entity;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Builder
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "TeacherAssignments")
@Data
public class TeacherAssignment {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Integer assignmentId;

	@ManyToOne
	@JoinColumn(name = "teacherId")
	private Teacher teacher;

	@ManyToOne
	@JoinColumn(name = "classId")
	private ClassEntity classEntity;

	@ManyToOne
	@JoinColumn(name = "subjectId")
	private Subject subject;
}

====================================================================================================
// File: src\main\java\com\ePathshala\entity\Timetable.java
====================================================================================================

package com.ePathshala.entity;

import java.time.DayOfWeek;
import java.time.LocalTime;

import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Builder
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "Timetables")
@Data
public class Timetable {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Integer timetableId;

	@ManyToOne
	@JoinColumn(name = "classId")
	private ClassEntity classEntity;

	@Enumerated(EnumType.STRING)
	private DayOfWeek dayOfWeek;

	private LocalTime startTime;
	private LocalTime endTime;

	@ManyToOne
	@JoinColumn(name = "subjectId")
	private Subject subject;

	@ManyToOne
	@JoinColumn(name = "teacherId")
	private Teacher teacher;
}

====================================================================================================
// File: src\main\java\com\ePathshala\entity\User.java
====================================================================================================

package com.ePathshala.entity;

import java.time.LocalDateTime;

import com.ePathshala.enums.Role;

import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "Users")
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class User {
    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer userId;

    private String name;
    private String email;
    private String passwordHash;

    @Enumerated(EnumType.STRING)
    private Role role;

    private String accountNumber;

    private LocalDateTime createdAt;
}

====================================================================================================
// File: src\main\java\com\ePathshala\enums\ApprovalStatus.java
====================================================================================================

package com.ePathshala.enums;

public enum ApprovalStatus {
    Pending, Approved, Rejected
}



====================================================================================================
// File: src\main\java\com\ePathshala\enums\AttendanceStatus.java
====================================================================================================

package com.ePathshala.enums;

public enum AttendanceStatus {
    Present, Absent
}


====================================================================================================
// File: src\main\java\com\ePathshala\enums\LeaveRequester.java
====================================================================================================

package com.ePathshala.enums;

public enum LeaveRequester {
    Student, Parent
}

====================================================================================================
// File: src\main\java\com\ePathshala\enums\Role.java
====================================================================================================

package com.ePathshala.enums;

public enum Role {
    Admin, Student, Teacher, Parent
}


====================================================================================================
// File: src\main\java\com\ePathshala\mapper\UserMapper.java
====================================================================================================

package com.ePathshala.mapper;

import org.springframework.stereotype.Component;

import com.ePathshala.dto.UserDTO;
import com.ePathshala.entity.User;

@Component
public class UserMapper {

	public UserDTO toDTO(User user) {
		if (user == null)
			return null;

		UserDTO dto = new UserDTO();
		dto.setUserId(user.getUserId());
		dto.setName(user.getName());
		dto.setEmail(user.getEmail());
		dto.setRole(user.getRole());
		dto.setAccountNumber(user.getAccountNumber());
		return dto;
	}

	public User toEntity(UserDTO dto) {
		if (dto == null)
			return null;

		User user = new User();
		user.setUserId(dto.getUserId());
		user.setName(dto.getName());
		user.setEmail(dto.getEmail());
		user.setRole(dto.getRole());
		user.setAccountNumber(dto.getAccountNumber());
		return user;
	}
}

====================================================================================================
// File: src\main\java\com\ePathshala\repository\AcademicEventRepository.java
====================================================================================================

package com.ePathshala.repository;

import java.time.LocalDate;
import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;

import com.ePathshala.entity.AcademicEvent;

public interface AcademicEventRepository extends JpaRepository<AcademicEvent, Integer> {
	List<AcademicEvent> findByEventDateBetween(LocalDate start, LocalDate end);
}

====================================================================================================
// File: src\main\java\com\ePathshala\repository\AssignmentRepository.java
====================================================================================================

package com.ePathshala.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;

import com.ePathshala.entity.Assignment;

public interface AssignmentRepository extends JpaRepository<Assignment, Integer> {
	List<Assignment> findByClassEntity_ClassId(Integer classId);

	List<Assignment> findByTeacher_TeacherId(Integer teacherId);
}

====================================================================================================
// File: src\main\java\com\ePathshala\repository\AttendanceRepository.java
====================================================================================================

package com.ePathshala.repository;

import java.time.LocalDate;
import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;

import com.ePathshala.entity.Attendance;

public interface AttendanceRepository extends JpaRepository<Attendance, Integer> {
	List<Attendance> findByStudent_StudentId(Integer studentId);

	List<Attendance> findByDate(LocalDate date);
}


====================================================================================================
// File: src\main\java\com\ePathshala\repository\ClassRepository.java
====================================================================================================

package com.ePathshala.repository;

import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;

import com.ePathshala.entity.ClassEntity;

public interface ClassRepository extends JpaRepository<ClassEntity, Integer> {
	Optional<ClassEntity> findByClassName(String className);
}


====================================================================================================
// File: src\main\java\com\ePathshala\repository\FeeRepository.java
====================================================================================================

package com.ePathshala.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;

import com.ePathshala.entity.Fee;

public interface FeeRepository extends JpaRepository<Fee, Integer> {
	List<Fee> findByClassEntity_ClassId(Integer classId);
}


====================================================================================================
// File: src\main\java\com\ePathshala\repository\FeedbackRepository.java
====================================================================================================

package com.ePathshala.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;

import com.ePathshala.entity.Feedback;

public interface FeedbackRepository extends JpaRepository<Feedback, Integer> {
	List<Feedback> findByEmail(String email);
}

====================================================================================================
// File: src\main\java\com\ePathshala\repository\GradeRepository.java
====================================================================================================

package com.ePathshala.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;

import com.ePathshala.entity.Grade;

public interface GradeRepository extends JpaRepository<Grade, Integer> {
	List<Grade> findByStudent_StudentId(Integer studentId);

	List<Grade> findByTeacher_TeacherId(Integer teacherId);
}


====================================================================================================
// File: src\main\java\com\ePathshala\repository\LeaveRequestRepository.java
====================================================================================================

package com.ePathshala.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;

import com.ePathshala.entity.LeaveRequest;
import com.ePathshala.enums.ApprovalStatus;

public interface LeaveRequestRepository extends JpaRepository<LeaveRequest, Integer> {
	List<LeaveRequest> findByStudent_StudentId(Integer studentId);

	List<LeaveRequest> findByTeacherApproval(ApprovalStatus status);
}

====================================================================================================
// File: src\main\java\com\ePathshala\repository\ParentRepository.java
====================================================================================================

package com.ePathshala.repository;

import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;

import com.ePathshala.entity.Parent;

public interface ParentRepository extends JpaRepository<Parent, Integer> {
	Optional<Parent> findByUser_UserId(Integer userId);
}


====================================================================================================
// File: src\main\java\com\ePathshala\repository\PaymentRepository.java
====================================================================================================

package com.ePathshala.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;

import com.ePathshala.entity.Payment;

public interface PaymentRepository extends JpaRepository<Payment, Integer> {
	List<Payment> findByStudent_StudentId(Integer studentId);
}


====================================================================================================
// File: src\main\java\com\ePathshala\repository\StudentRepository.java
====================================================================================================

package com.ePathshala.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;

import com.ePathshala.entity.Student;

public interface StudentRepository extends JpaRepository<Student, Integer> {
	List<Student> findByClassEntity_ClassId(Integer classId);

	List<Student> findByParent_ParentId(Integer parentId);
}


====================================================================================================
// File: src\main\java\com\ePathshala\repository\SubjectRepository.java
====================================================================================================

package com.ePathshala.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;

import com.ePathshala.entity.Subject;

public interface SubjectRepository extends JpaRepository<Subject, Integer> {
	List<Subject> findByClassEntity_ClassId(Integer classId);
}


====================================================================================================
// File: src\main\java\com\ePathshala\repository\TeacherAssignmentRepository.java
====================================================================================================

package com.ePathshala.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;

import com.ePathshala.entity.TeacherAssignment;

public interface TeacherAssignmentRepository extends JpaRepository<TeacherAssignment, Integer> {
	List<TeacherAssignment> findByTeacher_TeacherId(Integer teacherId);
}


====================================================================================================
// File: src\main\java\com\ePathshala\repository\TeacherRepository.java
====================================================================================================

package com.ePathshala.repository;

import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;

import com.ePathshala.entity.Teacher;

public interface TeacherRepository extends JpaRepository<Teacher, Integer> {
	Optional<Teacher> findByUser_UserId(Integer userId);
}


====================================================================================================
// File: src\main\java\com\ePathshala\repository\TimetableRepository.java
====================================================================================================

package com.ePathshala.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;

import com.ePathshala.entity.Timetable;

public interface TimetableRepository extends JpaRepository<Timetable, Integer> {
	List<Timetable> findByClassEntity_ClassId(Integer classId);

	List<Timetable> findByTeacher_TeacherId(Integer teacherId);
}

====================================================================================================
// File: src\main\java\com\ePathshala\repository\UserRepository.java
====================================================================================================

package com.ePathshala.repository;

import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;

import com.ePathshala.entity.User;

public interface UserRepository extends JpaRepository<User, Integer> {
	Optional<User> findByEmail(String email);

	boolean existsByEmail(String email);

	boolean existsByAccountNumber(String accountNumber);
}

====================================================================================================
// File: src\main\java\com\ePathshala\security\JwtAuthenticationFilter.java
====================================================================================================

package com.ePathshala.security;

import java.io.IOException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@Component
public class JwtAuthenticationFilter extends OncePerRequestFilter {

	@Autowired
	private JwtService jwtService;

	@Autowired
	private UserDetailsServiceImpl userDetailsService;

	@Override
	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
			throws ServletException, IOException {

		final String authHeader = request.getHeader("Authorization");
		final String token;
		final String email;

		if (authHeader == null || !authHeader.startsWith("Bearer ")) {
			filterChain.doFilter(request, response);
			return;
		}

		token = authHeader.substring(7);
		email = jwtService.extractUsername(token);

		if (email != null && SecurityContextHolder.getContext().getAuthentication() == null) {
			UserDetails userDetails = userDetailsService.loadUserByUsername(email);
			if (jwtService.isTokenValid(token, userDetails)) {
				UsernamePasswordAuthenticationToken authToken = new UsernamePasswordAuthenticationToken(userDetails,
						null, userDetails.getAuthorities());
				authToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
				SecurityContextHolder.getContext().setAuthentication(authToken);
			}
		}
		filterChain.doFilter(request, response);
	}
}

====================================================================================================
// File: src\main\java\com\ePathshala\security\JwtService.java
====================================================================================================

package com.ePathshala.security;

import java.util.Date;
import java.util.function.Function;

import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Service;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;

@Service
public class JwtService {

	private final String SECRET_KEY = "2e670140719e668c18b04bb860ab7151ea3fb065aadbc3e809043dc0219f1d0ae4f70134dfdabb17fcf3c77fd1c10591af7907b30b0f44110e992f48926717d6";

	public String extractUsername(String token) {
		return extractClaim(token, Claims::getSubject);
	}

	public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
		final Claims claims = extractAllClaims(token);
		return claimsResolver.apply(claims);
	}

	public String generateToken(UserDetails userDetails) {
		return Jwts.builder().setSubject(userDetails.getUsername()).claim("roles", userDetails.getAuthorities())
				.setIssuedAt(new Date()).setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 60))
				.signWith(SignatureAlgorithm.HS256, SECRET_KEY).compact();
	}

	public boolean isTokenValid(String token, UserDetails userDetails) {
		final String username = extractUsername(token);
		return username.equals(userDetails.getUsername()) && !isTokenExpired(token);
	}

	private boolean isTokenExpired(String token) {
		return extractExpiration(token).before(new Date());
	}

	private Date extractExpiration(String token) {
		return extractClaim(token, Claims::getExpiration);
	}

	private Claims extractAllClaims(String token) {
		return Jwts.parser().setSigningKey(SECRET_KEY).parseClaimsJws(token).getBody();
	}
}

====================================================================================================
// File: src\main\java\com\ePathshala\security\KeyGenerator.java
====================================================================================================

package com.ePathshala.security;

public class KeyGenerator {
//    public static void main(String[] args) {
//        String base64Key = Base64.getEncoder().encodeToString(Keys.secretKeyFor(SignatureAlgorithm.HS512).getEncoded());
//        System.out.println("Generated Base64 Key: " + base64Key);
//    }
}


====================================================================================================
// File: src\main\java\com\ePathshala\security\SecurityUtil.java
====================================================================================================

package com.ePathshala.security;

import org.springframework.security.core.Authentication;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.stereotype.Component;

@Component
public class SecurityUtil {

	private final JwtService jwtService;

	public SecurityUtil(JwtService jwtService) {
		this.jwtService = jwtService;
	}

	public String extractEmailFromToken(String token) {
		if (token != null && token.startsWith("Bearer ")) {
			token = token.substring(7);
		}
		return jwtService.extractUsername(token);
	}

	public boolean isAdmin(Authentication authentication) {
		return authentication.getAuthorities().contains(new SimpleGrantedAuthority("ROLE_ADMIN"));
	}
}

====================================================================================================
// File: src\main\java\com\ePathshala\security\UserDetailsServiceImpl.java
====================================================================================================

package com.ePathshala.security;

import java.util.List;

import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import com.ePathshala.entity.User;
import com.ePathshala.repository.UserRepository;

@Service
public class UserDetailsServiceImpl implements UserDetailsService {

	private final UserRepository userRepository;

	public UserDetailsServiceImpl(UserRepository userRepository) {
		this.userRepository = userRepository;
	}

	@Override
	public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
		User user = userRepository.findByEmail(email)
				.orElseThrow(() -> new UsernameNotFoundException("User not found"));

		return new org.springframework.security.core.userdetails.User(user.getEmail(), user.getPasswordHash(),
				List.of(new SimpleGrantedAuthority("ROLE_" + user.getRole().name())));
	}
}

====================================================================================================
// File: src\main\java\com\ePathshala\serviceImpl\AcademicEventServiceImpl.java
====================================================================================================

package com.ePathshala.serviceImpl;

import java.time.LocalDate;
import java.util.List;

import org.springframework.stereotype.Service;

import com.ePathshala.dto.AcademicEventDTO;
import com.ePathshala.repository.AcademicEventRepository;
import com.ePathshala.service.AcademicEventService;

@Service
public class AcademicEventServiceImpl implements AcademicEventService {

	private final AcademicEventRepository academicEventRepository;

	public AcademicEventServiceImpl(AcademicEventRepository academicEventRepository) {
		this.academicEventRepository = academicEventRepository;
	}

	@Override
	public AcademicEventDTO createEvent(AcademicEventDTO dto) {
		return null;
	}

	@Override
	public List<AcademicEventDTO> getEventsBetween(LocalDate start, LocalDate end) {
		return null;
	}
}

====================================================================================================
// File: src\main\java\com\ePathshala\serviceImpl\AssignmentServiceImpl.java
====================================================================================================

package com.ePathshala.serviceImpl;

import java.util.List;

import org.springframework.stereotype.Service;

import com.ePathshala.dto.AssignmentDTO;
import com.ePathshala.repository.AssignmentRepository;
import com.ePathshala.service.AssignmentService;

@Service
public class AssignmentServiceImpl implements AssignmentService {

	private final AssignmentRepository assignmentRepository;

	public AssignmentServiceImpl(AssignmentRepository assignmentRepository) {
		this.assignmentRepository = assignmentRepository;
	}

	@Override
	public AssignmentDTO uploadAssignment(AssignmentDTO dto) {
		return null;
	}

	@Override
	public List<AssignmentDTO> getByClassId(Integer classId) {
		return null;
	}

	@Override
	public List<AssignmentDTO> getByTeacherId(Integer teacherId) {
		return null;
	}
}

====================================================================================================
// File: src\main\java\com\ePathshala\serviceImpl\AttendanceServiceImpl.java
====================================================================================================

package com.ePathshala.serviceImpl;

import java.time.LocalDate;
import java.util.List;

import org.springframework.stereotype.Service;

import com.ePathshala.dto.AttendanceDTO;
import com.ePathshala.repository.AttendanceRepository;
import com.ePathshala.service.AttendanceService;

@Service
public class AttendanceServiceImpl implements AttendanceService {

	private final AttendanceRepository attendanceRepository;

	public AttendanceServiceImpl(AttendanceRepository attendanceRepository) {
		this.attendanceRepository = attendanceRepository;
	}

	@Override
	public AttendanceDTO markAttendance(AttendanceDTO dto) {
		return null;
	}

	@Override
	public List<AttendanceDTO> getByStudentId(Integer studentId) {
		return null;
	}

	@Override
	public List<AttendanceDTO> getByDate(LocalDate date) {
		return null;
	}
}

====================================================================================================
// File: src\main\java\com\ePathshala\serviceImpl\AuthServiceImpl.java
====================================================================================================

package com.ePathshala.serviceImpl;

import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.ePathshala.dto.LoginRequest;
import com.ePathshala.dto.LoginResponse;
import com.ePathshala.dto.RegisterUserRequest;
import com.ePathshala.dto.UserDTO;
import com.ePathshala.entity.User;
import com.ePathshala.mapper.UserMapper;
import com.ePathshala.repository.UserRepository;
import com.ePathshala.security.JwtService;
import com.ePathshala.service.AuthService;

@Service
public class AuthServiceImpl implements AuthService {

	private final UserRepository userRepository;
	private final JwtService jwtService;
	private final PasswordEncoder passwordEncoder;
	private final UserMapper userMapper;

	public AuthServiceImpl(UserRepository userRepository, JwtService jwtService, PasswordEncoder passwordEncoder,
			UserMapper userMapper) {
		this.userRepository = userRepository;
		this.jwtService = jwtService;
		this.passwordEncoder = passwordEncoder;
		this.userMapper = userMapper;
	}

	@Override
	public LoginResponse login(LoginRequest request) {
		User user = userRepository.findByEmail(request.getEmail())
				.orElseThrow(() -> new RuntimeException("User not found"));

		if (!user.getRole().equals(request.getRole())) {
			throw new RuntimeException("Role mismatch");
		}

		if (!passwordEncoder.matches(request.getPassword(), user.getPasswordHash())) {
			throw new RuntimeException("Invalid credentials");
		}

		String jwtToken = jwtService
				.generateToken(new org.springframework.security.core.userdetails.User(user.getEmail(),
						user.getPasswordHash(), List.of(new SimpleGrantedAuthority("ROLE_" + user.getRole().name()))));

		LoginResponse response = new LoginResponse();
		response.setJwtToken(jwtToken);
		response.setRole(user.getRole());
		response.setName(user.getName());

		return response;
	}

	@Override
	public UserDTO register(RegisterUserRequest request) {
		if (userRepository.existsByEmail(request.getEmail())) {
			throw new RuntimeException("Email already in use");
		}

		User user = User.builder().name(request.getName()).email(request.getEmail())
				.passwordHash(passwordEncoder.encode(request.getPassword())).role(request.getRole())
				.accountNumber(UUID.randomUUID().toString().substring(0, 10)) // optional
				.createdAt(LocalDateTime.now()).build();

		User savedUser = userRepository.save(user);
		return userMapper.toDTO(savedUser);
	}
}

====================================================================================================
// File: src\main\java\com\ePathshala\serviceImpl\ClassServiceImpl.java
====================================================================================================

package com.ePathshala.serviceImpl;

import java.util.Optional;

import org.springframework.stereotype.Service;

import com.ePathshala.dto.ClassDTO;
import com.ePathshala.repository.ClassRepository;
import com.ePathshala.service.ClassService;

@Service
public class ClassServiceImpl implements ClassService {

	private final ClassRepository classRepository;

	public ClassServiceImpl(ClassRepository classRepository) {
		this.classRepository = classRepository;
	}

	@Override
	public ClassDTO createClass(ClassDTO dto) {
		return null;
	}

	@Override
	public Optional<ClassDTO> getClassById(Integer classId) {
		return null;
	}
}

====================================================================================================
// File: src\main\java\com\ePathshala\serviceImpl\FeeServiceImpl.java
====================================================================================================

package com.ePathshala.serviceImpl;

import java.util.List;

import org.springframework.stereotype.Service;

import com.ePathshala.dto.FeeDTO;
import com.ePathshala.repository.FeeRepository;
import com.ePathshala.service.FeeService;

@Service
public class FeeServiceImpl implements FeeService {

	private final FeeRepository feeRepository;

	public FeeServiceImpl(FeeRepository feeRepository) {
		this.feeRepository = feeRepository;
	}

	@Override
	public FeeDTO createFee(FeeDTO dto) {
		return null;
	}

	@Override
	public List<FeeDTO> getFeesByClassId(Integer classId) {
		return null;
	}
}

====================================================================================================
// File: src\main\java\com\ePathshala\serviceImpl\FeedbackServiceImpl.java
====================================================================================================

package com.ePathshala.serviceImpl;

import java.util.List;

import org.springframework.stereotype.Service;

import com.ePathshala.dto.FeedbackDTO;
import com.ePathshala.repository.FeedbackRepository;
import com.ePathshala.service.FeedbackService;

@Service
public class FeedbackServiceImpl implements FeedbackService {

	private final FeedbackRepository feedbackRepository;

	public FeedbackServiceImpl(FeedbackRepository feedbackRepository) {
		this.feedbackRepository = feedbackRepository;
	}

	@Override
	public FeedbackDTO submitFeedback(FeedbackDTO dto) {
		return null;
	}

	@Override
	public List<FeedbackDTO> getFeedbacksByEmail(String email) {
		return null;
	}
}

====================================================================================================
// File: src\main\java\com\ePathshala\serviceImpl\GradeServiceImpl.java
====================================================================================================

package com.ePathshala.serviceImpl;

import java.util.List;

import org.springframework.stereotype.Service;

import com.ePathshala.dto.GradeDTO;
import com.ePathshala.repository.GradeRepository;
import com.ePathshala.service.GradeService;

@Service
public class GradeServiceImpl implements GradeService {

	private final GradeRepository gradeRepository;

	public GradeServiceImpl(GradeRepository gradeRepository) {
		this.gradeRepository = gradeRepository;
	}

	@Override
	public GradeDTO enterGrade(GradeDTO dto) {
		return null;
	}

	@Override
	public List<GradeDTO> getGradesByStudentId(Integer studentId) {
		return null;
	}

	@Override
	public List<GradeDTO> getGradesByTeacherId(Integer teacherId) {
		return null;
	}

	@Override
	public GradeDTO updateGrade(Long id, GradeDTO dto) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void deleteGrade(Long id) {
		// TODO Auto-generated method stub

	}

	@Override
	public GradeDTO createGrade(GradeDTO dto) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<GradeDTO> getAllGrades() {
		// TODO Auto-generated method stub
		return null;
	}
}

====================================================================================================
// File: src\main\java\com\ePathshala\serviceImpl\LeaveRequestServiceImpl.java
====================================================================================================

package com.ePathshala.serviceImpl;

import java.util.List;

import org.springframework.stereotype.Service;

import com.ePathshala.dto.LeaveRequestDTO;
import com.ePathshala.enums.ApprovalStatus;
import com.ePathshala.repository.LeaveRequestRepository;
import com.ePathshala.service.LeaveRequestService;

@Service
public class LeaveRequestServiceImpl implements LeaveRequestService {

	private final LeaveRequestRepository leaveRequestRepository;

	public LeaveRequestServiceImpl(LeaveRequestRepository leaveRequestRepository) {
		this.leaveRequestRepository = leaveRequestRepository;
	}

	@Override
	public LeaveRequestDTO submitLeaveRequest(LeaveRequestDTO dto) {
		return null;
	}

	@Override
	public LeaveRequestDTO updateApprovalStatus(Integer leaveId, ApprovalStatus teacher, ApprovalStatus parent) {
		return null;
	}

	@Override
	public List<LeaveRequestDTO> getByStudentId(Integer studentId) {
		return null;
	}

	@Override
	public List<LeaveRequestDTO> getAllLeaveRequests() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public LeaveRequestDTO createLeaveRequest(LeaveRequestDTO dto) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void deleteLeaveRequest(Long id) {
		// TODO Auto-generated method stub

	}

	@Override
	public LeaveRequestDTO updateLeaveRequest(Long id, LeaveRequestDTO dto) {
		// TODO Auto-generated method stub
		return null;
	}
}

====================================================================================================
// File: src\main\java\com\ePathshala\serviceImpl\ParentServiceImpl.java
====================================================================================================

package com.ePathshala.serviceImpl;

import java.util.Optional;

import org.springframework.stereotype.Service;

import com.ePathshala.dto.ParentDTO;
import com.ePathshala.repository.ParentRepository;
import com.ePathshala.service.ParentService;

@Service
public class ParentServiceImpl implements ParentService {

	private final ParentRepository parentRepository;

	public ParentServiceImpl(ParentRepository parentRepository) {
		this.parentRepository = parentRepository;
	}

	@Override
	public ParentDTO registerParent(ParentDTO dto) {
		return null;
	}

	@Override
	public Optional<ParentDTO> getParentByUserId(Integer userId) {
		return null;
	}
}

====================================================================================================
// File: src\main\java\com\ePathshala\serviceImpl\PaymentServiceImpl.java
====================================================================================================

package com.ePathshala.serviceImpl;

import java.util.List;

import org.springframework.stereotype.Service;

import com.ePathshala.dto.PaymentDTO;
import com.ePathshala.repository.PaymentRepository;
import com.ePathshala.service.PaymentService;

@Service
public class PaymentServiceImpl implements PaymentService {

	private final PaymentRepository paymentRepository;

	public PaymentServiceImpl(PaymentRepository paymentRepository) {
		this.paymentRepository = paymentRepository;
	}

	@Override
	public PaymentDTO recordPayment(PaymentDTO dto) {
		return null;
	}

	@Override
	public List<PaymentDTO> getPaymentsByStudentId(Integer studentId) {
		return null;
	}
}

====================================================================================================
// File: src\main\java\com\ePathshala\serviceImpl\StudentServiceImpl.java
====================================================================================================

package com.ePathshala.serviceImpl;

import java.util.List;
import java.util.Optional;

import org.springframework.stereotype.Service;

import com.ePathshala.dto.StudentDTO;
import com.ePathshala.repository.ClassRepository;
import com.ePathshala.repository.ParentRepository;
import com.ePathshala.repository.StudentRepository;
import com.ePathshala.repository.UserRepository;
import com.ePathshala.service.StudentService;

@Service
public class StudentServiceImpl implements StudentService {

	private final StudentRepository studentRepository;
	private final ClassRepository classRepository;
	private final ParentRepository parentRepository;
	private final UserRepository userRepository;

	public StudentServiceImpl(StudentRepository studentRepository, ClassRepository classRepository,
			ParentRepository parentRepository, UserRepository userRepository) {
		this.studentRepository = studentRepository;
		this.classRepository = classRepository;
		this.parentRepository = parentRepository;
		this.userRepository = userRepository;
	}

	@Override
	public StudentDTO registerStudent(StudentDTO dto) {
		return null;
	}

	@Override
	public List<StudentDTO> getStudentsByClassId(Integer classId) {
		return null;
	}

	@Override
	public Optional<StudentDTO> getStudentByUserId(Integer userId) {
		return null;
	}

	@Override
	public List<StudentDTO> getAllStudents() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public StudentDTO getStudentById(Long id) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public StudentDTO createStudent(StudentDTO dto) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public StudentDTO updateStudent(Long id, StudentDTO dto) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void deleteStudent(Long id) {
		// TODO Auto-generated method stub

	}
}

====================================================================================================
// File: src\main\java\com\ePathshala\serviceImpl\SubjectServiceImpl.java
====================================================================================================

package com.ePathshala.serviceImpl;

import java.util.List;

import org.springframework.stereotype.Service;

import com.ePathshala.dto.SubjectDTO;
import com.ePathshala.repository.SubjectRepository;
import com.ePathshala.service.SubjectService;

@Service
public class SubjectServiceImpl implements SubjectService {

	private final SubjectRepository subjectRepository;

	public SubjectServiceImpl(SubjectRepository subjectRepository) {
		this.subjectRepository = subjectRepository;
	}

	@Override
	public SubjectDTO createSubject(SubjectDTO dto) {
		return null;
	}

	@Override
	public List<SubjectDTO> getSubjectsByClassId(Integer classId) {
		return null;
	}
}

====================================================================================================
// File: src\main\java\com\ePathshala\serviceImpl\TeacherServiceImpl.java
====================================================================================================

package com.ePathshala.serviceImpl;

import java.util.Optional;

import org.springframework.stereotype.Service;

import com.ePathshala.dto.TeacherDTO;
import com.ePathshala.repository.TeacherRepository;
import com.ePathshala.service.TeacherService;

@Service
public class TeacherServiceImpl implements TeacherService {

	private final TeacherRepository teacherRepository;

	public TeacherServiceImpl(TeacherRepository teacherRepository) {
		this.teacherRepository = teacherRepository;
	}

	@Override
	public TeacherDTO registerTeacher(TeacherDTO dto) {
		return null;
	}

	@Override
	public Optional<TeacherDTO> getTeacherByUserId(Integer userId) {
		return null;
	}
}

====================================================================================================
// File: src\main\java\com\ePathshala\serviceImpl\TimetableServiceImpl.java
====================================================================================================

package com.ePathshala.serviceImpl;

import java.util.List;

import org.springframework.stereotype.Service;

import com.ePathshala.dto.TimetableDTO;
import com.ePathshala.repository.TimetableRepository;
import com.ePathshala.service.TimetableService;

@Service
public class TimetableServiceImpl implements TimetableService {

	private final TimetableRepository timetableRepository;

	public TimetableServiceImpl(TimetableRepository timetableRepository) {
		this.timetableRepository = timetableRepository;
	}

	@Override
	public TimetableDTO createTimetable(TimetableDTO dto) {
		return null;
	}

	@Override
	public List<TimetableDTO> getByClassId(Integer classId) {
		return null;
	}

	@Override
	public List<TimetableDTO> getByTeacherId(Integer teacherId) {
		return null;
	}

	@Override
	public void deleteTimetable(Long id) {
		// TODO Auto-generated method stub

	}

	@Override
	public TimetableDTO updateTimetable(Long id, TimetableDTO dto) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<TimetableDTO> getAllTimetables() {
		// TODO Auto-generated method stub
		return null;
	}
}

====================================================================================================
// File: src\main\java\com\ePathshala\serviceImpl\UserServiceImpl.java
====================================================================================================

package com.ePathshala.serviceImpl;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import com.ePathshala.dto.UserDTO;
import com.ePathshala.entity.User;
import com.ePathshala.mapper.UserMapper;
import com.ePathshala.repository.UserRepository;
import com.ePathshala.service.UserService;

@Service
public class UserServiceImpl implements UserService {

	private final UserRepository userRepository;
	private final UserMapper userMapper;

	public UserServiceImpl(UserRepository userRepository, UserMapper userMapper) {
		this.userRepository = userRepository;
		this.userMapper = userMapper;
	}

	@Override
	public Optional<UserDTO> getUserById(Integer userId) {
		return userRepository.findById(userId).map(userMapper::toDTO);
	}

	@Override
	public List<UserDTO> getAllUsers() {
		return userRepository.findAll().stream().map(userMapper::toDTO).collect(Collectors.toList());
	}

	@Override
	public void deleteUser(Integer userId) {
		userRepository.deleteById(userId);
	}

	@Override
	public UserDTO updateUser(Integer userId, UserDTO dto) {
		User user = userRepository.findById(userId).orElseThrow();
		user.setName(dto.getName());
		user.setEmail(dto.getEmail());
		user.setRole(dto.getRole());
		user.setAccountNumber(dto.getAccountNumber());
		return userMapper.toDTO(userRepository.save(user));
	}

	@Override
	public UserDTO getUserById(Long id) {
		return userRepository.findById(id.intValue()).map(userMapper::toDTO)
				.orElseThrow(() -> new RuntimeException("User not found"));
	}

	@Override
	public UserDTO createUser(UserDTO dto) {
		User user = userMapper.toEntity(dto);
		User saved = userRepository.save(user);
		return userMapper.toDTO(saved);
	}

	@Override
	public UserDTO updateUser(Long id, UserDTO dto) {
		return updateUser(id.intValue(), dto);
	}

	@Override
	public void deleteUser(Long id) {
		deleteUser(id.intValue());
	}
}

====================================================================================================
// File: src\main\java\com\ePathshala\service\AcademicEventService.java
====================================================================================================

package com.ePathshala.service;

import java.time.LocalDate;
import java.util.List;

import com.ePathshala.dto.AcademicEventDTO;

public interface AcademicEventService {
	AcademicEventDTO createEvent(AcademicEventDTO dto);

	List<AcademicEventDTO> getEventsBetween(LocalDate start, LocalDate end);
}

====================================================================================================
// File: src\main\java\com\ePathshala\service\AssignmentService.java
====================================================================================================

package com.ePathshala.service;

import java.util.List;

import com.ePathshala.dto.AssignmentDTO;

public interface AssignmentService {
	AssignmentDTO uploadAssignment(AssignmentDTO dto);

	List<AssignmentDTO> getByClassId(Integer classId);

	List<AssignmentDTO> getByTeacherId(Integer teacherId);
}

====================================================================================================
// File: src\main\java\com\ePathshala\service\AttendanceService.java
====================================================================================================

package com.ePathshala.service;

import java.time.LocalDate;
import java.util.List;

import com.ePathshala.dto.AttendanceDTO;

public interface AttendanceService {
	AttendanceDTO markAttendance(AttendanceDTO dto);

	List<AttendanceDTO> getByStudentId(Integer studentId);

	List<AttendanceDTO> getByDate(LocalDate date);
}

====================================================================================================
// File: src\main\java\com\ePathshala\service\AuthService.java
====================================================================================================

package com.ePathshala.service;

import com.ePathshala.dto.LoginRequest;
import com.ePathshala.dto.LoginResponse;
import com.ePathshala.dto.RegisterUserRequest;
import com.ePathshala.dto.UserDTO;

public interface AuthService {
	LoginResponse login(LoginRequest request);

	UserDTO register(RegisterUserRequest request);
}

====================================================================================================
// File: src\main\java\com\ePathshala\service\ClassService.java
====================================================================================================

package com.ePathshala.service;

import java.util.Optional;

import com.ePathshala.dto.ClassDTO;

public interface ClassService {
	ClassDTO createClass(ClassDTO dto);

	Optional<ClassDTO> getClassById(Integer classId);
}

====================================================================================================
// File: src\main\java\com\ePathshala\service\FeeService.java
====================================================================================================

package com.ePathshala.service;

import java.util.List;

import com.ePathshala.dto.FeeDTO;

public interface FeeService {
	FeeDTO createFee(FeeDTO dto);

	List<FeeDTO> getFeesByClassId(Integer classId);
}

====================================================================================================
// File: src\main\java\com\ePathshala\service\FeedbackService.java
====================================================================================================

package com.ePathshala.service;

import java.util.List;

import com.ePathshala.dto.FeedbackDTO;

public interface FeedbackService {
	FeedbackDTO submitFeedback(FeedbackDTO dto);

	List<FeedbackDTO> getFeedbacksByEmail(String email);
}

====================================================================================================
// File: src\main\java\com\ePathshala\service\GradeService.java
====================================================================================================

package com.ePathshala.service;

import java.util.List;

import com.ePathshala.dto.GradeDTO;

public interface GradeService {
	GradeDTO enterGrade(GradeDTO dto);

	List<GradeDTO> getGradesByStudentId(Integer studentId);

	List<GradeDTO> getGradesByTeacherId(Integer teacherId);

	GradeDTO updateGrade(Long id, GradeDTO dto);

	void deleteGrade(Long id);

	GradeDTO createGrade(GradeDTO dto);

	List<GradeDTO> getAllGrades();
}

====================================================================================================
// File: src\main\java\com\ePathshala\service\LeaveRequestService.java
====================================================================================================

package com.ePathshala.service;

import java.util.List;

import com.ePathshala.dto.LeaveRequestDTO;
import com.ePathshala.enums.ApprovalStatus;

public interface LeaveRequestService {
	LeaveRequestDTO submitLeaveRequest(LeaveRequestDTO dto);

	LeaveRequestDTO updateApprovalStatus(Integer leaveId, ApprovalStatus teacher, ApprovalStatus parent);

	List<LeaveRequestDTO> getByStudentId(Integer studentId);

	List<LeaveRequestDTO> getAllLeaveRequests();

	LeaveRequestDTO createLeaveRequest(LeaveRequestDTO dto);

	void deleteLeaveRequest(Long id);

	LeaveRequestDTO updateLeaveRequest(Long id, LeaveRequestDTO dto);
}

====================================================================================================
// File: src\main\java\com\ePathshala\service\ParentService.java
====================================================================================================

package com.ePathshala.service;

import java.util.Optional;

import com.ePathshala.dto.ParentDTO;

public interface ParentService {
	ParentDTO registerParent(ParentDTO dto);

	Optional<ParentDTO> getParentByUserId(Integer userId);
}

====================================================================================================
// File: src\main\java\com\ePathshala\service\PaymentService.java
====================================================================================================

package com.ePathshala.service;

import java.util.List;

import com.ePathshala.dto.PaymentDTO;

public interface PaymentService {
	PaymentDTO recordPayment(PaymentDTO dto);

	List<PaymentDTO> getPaymentsByStudentId(Integer studentId);
}

====================================================================================================
// File: src\main\java\com\ePathshala\service\StudentService.java
====================================================================================================

package com.ePathshala.service;

import java.util.List;
import java.util.Optional;

import com.ePathshala.dto.StudentDTO;

public interface StudentService {
	StudentDTO registerStudent(StudentDTO dto);

	List<StudentDTO> getStudentsByClassId(Integer classId);

	Optional<StudentDTO> getStudentByUserId(Integer userId);

	List<StudentDTO> getAllStudents();

	StudentDTO getStudentById(Long id);

	StudentDTO createStudent(StudentDTO dto);

	StudentDTO updateStudent(Long id, StudentDTO dto);

	void deleteStudent(Long id);
}

====================================================================================================
// File: src\main\java\com\ePathshala\service\SubjectService.java
====================================================================================================

package com.ePathshala.service;

import java.util.List;

import com.ePathshala.dto.SubjectDTO;

public interface SubjectService {
	SubjectDTO createSubject(SubjectDTO dto);

	List<SubjectDTO> getSubjectsByClassId(Integer classId);
}

====================================================================================================
// File: src\main\java\com\ePathshala\service\TeacherAssignmentService.java
====================================================================================================

package com.ePathshala.service;

import java.util.List;

import com.ePathshala.dto.TeacherAssignmentDTO;

public interface TeacherAssignmentService {
	TeacherAssignmentDTO assignTeacherToSubject(TeacherAssignmentDTO dto);

	List<TeacherAssignmentDTO> getAssignmentsByTeacherId(Integer teacherId);
}

====================================================================================================
// File: src\main\java\com\ePathshala\service\TeacherService.java
====================================================================================================

package com.ePathshala.service;

import java.util.Optional;

import com.ePathshala.dto.TeacherDTO;

public interface TeacherService {
	TeacherDTO registerTeacher(TeacherDTO dto);

	Optional<TeacherDTO> getTeacherByUserId(Integer userId);
}

====================================================================================================
// File: src\main\java\com\ePathshala\service\TimetableService.java
====================================================================================================

package com.ePathshala.service;

import java.util.List;

import com.ePathshala.dto.TimetableDTO;

public interface TimetableService {
	TimetableDTO createTimetable(TimetableDTO dto);

	List<TimetableDTO> getByClassId(Integer classId);

	List<TimetableDTO> getByTeacherId(Integer teacherId);

	void deleteTimetable(Long id);

	TimetableDTO updateTimetable(Long id, TimetableDTO dto);

	List<TimetableDTO> getAllTimetables();
}

====================================================================================================
// File: src\main\java\com\ePathshala\service\UserService.java
====================================================================================================

package com.ePathshala.service;

import java.util.List;
import java.util.Optional;

import com.ePathshala.dto.UserDTO;

public interface UserService {
	Optional<UserDTO> getUserById(Integer userId);

	List<UserDTO> getAllUsers();

	void deleteUser(Integer userId);

	UserDTO updateUser(Integer userId, UserDTO dto);

	UserDTO getUserById(Long id);

	UserDTO createUser(UserDTO dto);

	UserDTO updateUser(Long id, UserDTO dto);

	void deleteUser(Long id);
}

====================================================================================================
// File: src\test\java\com\ePathshala\ERP\EPathshalaApplicationTests.java
====================================================================================================

package com.ePathshala.ERP;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class EPathshalaApplicationTests {

	@Test
	void contextLoads() {
	}

}


====================================================================================================
// File: src\main\resources\META-INF\additional-spring-configuration-metadata.json
====================================================================================================

{"properties": [
  {
    "name": "jwt.expiration.ms",
    "type": "java.lang.String",
    "description": "A description for 'jwt.expiration.ms'"
  },
  {
    "name": "jwt.secret",
    "type": "java.lang.String",
    "description": "A description for 'jwt.secret'"
  }
]}

====================================================================================================
// File: HELP.md
====================================================================================================

# Getting Started

### Reference Documentation
For further reference, please consider the following sections:

* [Official Apache Maven documentation](https://maven.apache.org/guides/index.html)
* [Spring Boot Maven Plugin Reference Guide](https://docs.spring.io/spring-boot/3.5.3/maven-plugin)
* [Create an OCI image](https://docs.spring.io/spring-boot/3.5.3/maven-plugin/build-image.html)
* [Spring Data JPA](https://docs.spring.io/spring-boot/3.5.3/reference/data/sql.html#data.sql.jpa-and-spring-data)
* [Spring Boot DevTools](https://docs.spring.io/spring-boot/3.5.3/reference/using/devtools.html)
* [Java Mail Sender](https://docs.spring.io/spring-boot/3.5.3/reference/io/email.html)
* [Spring Security](https://docs.spring.io/spring-boot/3.5.3/reference/web/spring-security.html)
* [Validation](https://docs.spring.io/spring-boot/3.5.3/reference/io/validation.html)
* [Spring Web](https://docs.spring.io/spring-boot/3.5.3/reference/web/servlet.html)

### Guides
The following guides illustrate how to use some features concretely:

* [Accessing Data with JPA](https://spring.io/guides/gs/accessing-data-jpa/)
* [Accessing data with MySQL](https://spring.io/guides/gs/accessing-data-mysql/)
* [Securing a Web Application](https://spring.io/guides/gs/securing-web/)
* [Spring Boot and OAuth2](https://spring.io/guides/tutorials/spring-boot-oauth2/)
* [Authenticating a User with LDAP](https://spring.io/guides/gs/authenticating-ldap/)
* [Validation](https://spring.io/guides/gs/validating-form-input/)
* [Building a RESTful Web Service](https://spring.io/guides/gs/rest-service/)
* [Serving Web Content with Spring MVC](https://spring.io/guides/gs/serving-web-content/)
* [Building REST services with Spring](https://spring.io/guides/tutorials/rest/)

### Maven Parent overrides

Due to Maven's design, elements are inherited from the parent POM to the project POM.
While most of the inheritance is fine, it also inherits unwanted elements like `<license>` and `<developers>` from the parent.
To prevent this, the project POM contains empty overrides for these elements.
If you manually switch to a different parent and actually want the inheritance, you need to remove those overrides.



====================================================================================================
// File: .mvn\wrapper\maven-wrapper.properties
====================================================================================================

# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
wrapperVersion=3.3.2
distributionType=only-script
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.11/apache-maven-3.9.11-bin.zip


====================================================================================================
// File: src\main\resources\application.properties
====================================================================================================

spring.application.name=ePathshala
#DB config
spring.datasource.url=jdbc:mysql://localhost:3306/ePathshala1?createDatabaseIfNotExist=true
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect
spring.jpa.open-in-view=false
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
#default server port 8080
#server.port=9090

server.servlet.context-path=/ePathshala

jwt.secret=2e670140719e668c18b04bb860ab7151ea3fb065aadbc3e809043dc0219f1d0ae4f70134dfdabb17fcf3c77fd1c10591af7907b30b0f44110e992f48926717d6
jwt.expiration.ms=86400000

springdoc.api-docs.enabled=true
springdoc.swagger-ui.enabled=true
springdoc.swagger-ui.path=/swagger-ui



====================================================================================================
// File: deps.txt
====================================================================================================

[ERROR reading file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte]


====================================================================================================
// File: pom.xml
====================================================================================================

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.5.3</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.ePathshala</groupId>
	<artifactId>ePathshala</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>ePathshala</name>
	<description>ePathshala</description>
	<url/>
	<licenses>
		<license/>
	</licenses>
	<developers>
		<developer/>
	</developers>
	<scm>
		<connection/>
		<developerConnection/>
		<tag/>
		<url/>
	</scm>
	<properties>
		<java.version>17</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-mail</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>com.mysql</groupId>
			<artifactId>mysql-connector-j</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
    <groupId>io.jsonwebtoken</groupId>
    <artifactId>jjwt-api</artifactId>
    <version>0.11.5</version>
</dependency>
<dependency>
    <groupId>io.jsonwebtoken</groupId>
    <artifactId>jjwt-impl</artifactId>
    <version>0.11.5</version>
    <scope>runtime</scope>
</dependency>
<dependency>
    <groupId>io.jsonwebtoken</groupId>
    <artifactId>jjwt-jackson</artifactId>
    <version>0.11.5</version>
    <scope>runtime</scope>
</dependency>

<dependency>
    <groupId>org.springdoc</groupId>
    <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
    <version>2.5.0</version>
</dependency>
	
	<!-- https://mvnrepository.com/artifact/org.springdoc/springdoc-openapi-starter-webmvc-ui -->
<dependency>
    <groupId>org.springdoc</groupId>
    <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
    <version>2.6.0</version>
</dependency>
	</dependencies>
	
	
	
	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<annotationProcessorPaths>
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</path>
					</annotationProcessorPaths>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
